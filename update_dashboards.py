#!/usr/bin/env python3
"""
GitHub Dashboard Automatic Updater
"""

import json
import os
from pathlib import Path
from typing import Dict, List, Any


class GitHubDashboardUpdater:
    """
    Updates JSON dashboards with specific organization and repository configurations
    """

    def __init__(self, config_file: str = "dashboard_config.json"):
        self.config_file = config_file
        self.dashboards_dir = Path("dashboards")
        self.config = self._load_config()

    def _load_config(self) -> Dict[str, Any]:
        """Loads configuration generated by the main script"""
        try:
            with open(self.config_file) as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"‚ö†Ô∏è  File {self.config_file} not found.")
            print("Run the generate_provisioning.py script first")
            return {}

    def update_all_dashboards(self) -> None:
        """
        Updates all dashboards with specific configurations
        US01: Ready-to-use panels to monitor repository activity
        """
        if not self.config:
            return

        dashboard_files = ["github.json", "github-organization.json"]

        for dashboard_file in dashboard_files:
            dashboard_path = self.dashboards_dir / dashboard_file
            if dashboard_path.exists():
                self._update_dashboard(dashboard_path)
            else:
                print(f"‚ö†Ô∏è  Dashboard {dashboard_file} not found")

    def _update_dashboard(self, dashboard_path: Path) -> None:
        """
        Updates a specific dashboard with repository filters
        """
        try:
            with open(dashboard_path) as f:
                dashboard = json.load(f)

            # Update template variables
            if "templating" in dashboard and "list" in dashboard["templating"]:
                self._update_template_variables(dashboard["templating"]["list"])

            # Save updated dashboard
            with open(dashboard_path, "w") as f:
                json.dump(dashboard, f, indent=2)

            print(f"‚úÖ Dashboard updated: {dashboard_path}")

        except Exception as e:
            print(f"‚ùå Error updating {dashboard_path}: {e}")

    def _update_template_variables(self, template_list: List[Dict[str, Any]]) -> None:
        """
        Updates template variables with specific configurations
        """
        for template_var in template_list:
            var_name = template_var.get("name", "")

            if var_name == "organization":
                self._update_organization_variable(template_var)
            elif var_name == "repository":
                self._update_repository_variable(template_var)

    def _update_organization_variable(self, template_var: Dict[str, Any]) -> None:
        """Updates organization variable"""
        if "org_options" in self.config:
            template_var["options"] = self.config["org_options"]
            template_var["query"] = self.config.get("org_list", "")

            # Set default organization
            if self.config["org_options"]:
                default_org = self.config["default_org"]
                template_var["current"] = {"text": default_org, "value": default_org}

    def _update_repository_variable(self, template_var: Dict[str, Any]) -> None:
        """
        Updates repository variable with filter regex
        """
        if "repo_regex" in self.config:
            template_var["regex"] = self.config["repo_regex"]

    def generate_custom_dashboard(self, org_name: str, repo_list: List[str]) -> str:
        """
        Generates custom dashboard for specific organization
        """
        custom_dashboard = {
            "annotations": {"list": []},
            "description": f"Custom dashboard for {org_name}",
            "editable": True,
            "fiscalYearStartMonth": 0,
            "graphTooltip": 0,
            "id": None,
            "links": [],
            "panels": self._generate_custom_panels(org_name, repo_list),
            "refresh": "",
            "schemaVersion": 41,
            "tags": [org_name, "custom"],
            "templating": {
                "list": self._generate_custom_template_variables(org_name, repo_list)
            },
            "time": {"from": "now-30d", "to": "now"},
            "timepicker": {},
            "timezone": "",
            "title": f"GitHub - {org_name}",
            "uid": f"custom-{org_name.lower()}",
            "version": 1,
        }

        output_file = self.dashboards_dir / f"github-{org_name.lower()}.json"
        with open(output_file, "w") as f:
            json.dump(custom_dashboard, f, indent=2)

        print(f"üìä Custom dashboard created: {output_file}")
        return str(output_file)

    def _generate_custom_panels(
        self, org_name: str, repo_list: List[str]
    ) -> List[Dict[str, Any]]:
        """
        Generates custom panels for specific organization
        """
        panels = []

        stats_panel = {
            "id": 1,
            "title": f"Statistics - {org_name}",
            "type": "stat",
            "gridPos": {"h": 4, "w": 24, "x": 0, "y": 0},
            "targets": [
                {
                    "datasource": {"uid": "$datasource"},
                    "owner": org_name,
                    "queryType": "Issues",
                    "refId": "A",
                }
            ],
            "fieldConfig": {
                "defaults": {
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {"color": "green", "value": None},
                            {"color": "red", "value": 80},
                        ],
                    },
                }
            },
        }
        panels.append(stats_panel)

        y_pos = 4
        for i, repo in enumerate(repo_list):
            repo_panel = {
                "id": i + 2,
                "title": f"Repository: {repo}",
                "type": "table",
                "gridPos": {"h": 8, "w": 12, "x": (i % 2) * 12, "y": y_pos},
                "targets": [
                    {
                        "datasource": {"uid": "$datasource"},
                        "owner": org_name,
                        "repository": repo,
                        "queryType": "Issues",
                        "refId": "A",
                    }
                ],
            }
            panels.append(repo_panel)

            if i % 2 == 1:
                y_pos += 8

        return panels

    def _generate_custom_template_variables(
        self, org_name: str, repo_list: List[str]
    ) -> List[Dict[str, Any]]:
        """Generates template variables for custom dashboard"""
        return [
            {
                "name": "datasource",
                "type": "datasource",
                "query": "grafana-github-datasource",
                "current": {"text": "GitHub", "value": "GitHub"},
            },
            {
                "name": "organization",
                "type": "textbox",
                "query": org_name,
                "current": {"text": org_name, "value": org_name},
            },
            {
                "name": "repository",
                "type": "custom",
                "query": ",".join(repo_list),
                "options": [{"text": repo, "value": repo} for repo in repo_list],
            },
        ]


def main():
    """
    Main function for dashboard updates
    Implements all filtering and customization requirements
    """
    print("üîÑ Starting dashboard update...")

    updater = GitHubDashboardUpdater()

    if not updater.config:
        print("‚ùå Configuration not found. Run generate_provisioning.py first.")
        return 1

    updater.update_all_dashboards()

    if "org_list" in updater.config:
        orgs = updater.config["org_list"].split(",")

        repos_str = os.getenv("REPOS", "")
        if repos_str:
            all_repos = [repo.strip() for repo in repos_str.split(",")]

            for org in orgs:
                org_repos = [
                    repo.split("/")[-1]
                    for repo in all_repos
                    if repo.startswith(f"{org}/")
                ]
                if org_repos:
                    updater.generate_custom_dashboard(org, org_repos)

    print("‚úÖ Dashboard update completed!")
    return 0


if __name__ == "__main__":
    exit(main())
